/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IEverscale {
  export type EverscaleAddressStruct = {
    wid: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<BigNumberish>;
  };

  export type EverscaleAddressStructOutput = [BigNumber, BigNumber] & {
    wid: BigNumber;
    addr: BigNumber;
  };
}

export declare namespace IVaultBasic {
  export type WithdrawalParamsStruct = {
    sender: IEverscale.EverscaleAddressStruct;
    amount: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawalParamsStructOutput = [
    IEverscale.EverscaleAddressStructOutput,
    BigNumber,
    string,
    number
  ] & {
    sender: IEverscale.EverscaleAddressStructOutput;
    amount: BigNumber;
    recipient: string;
    chainId: number;
  };
}

export declare namespace IVault {
  export type PendingWithdrawalIdStruct = {
    recipient: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
  };

  export type PendingWithdrawalIdStructOutput = [string, BigNumber] & {
    recipient: string;
    id: BigNumber;
  };

  export type PendingWithdrawalParamsStruct = {
    amount: PromiseOrValue<BigNumberish>;
    bounty: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    approveStatus: PromiseOrValue<BigNumberish>;
  };

  export type PendingWithdrawalParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    amount: BigNumber;
    bounty: BigNumber;
    timestamp: BigNumber;
    approveStatus: number;
  };

  export type StrategyParamsStruct = {
    performanceFee: PromiseOrValue<BigNumberish>;
    activation: PromiseOrValue<BigNumberish>;
    debtRatio: PromiseOrValue<BigNumberish>;
    minDebtPerHarvest: PromiseOrValue<BigNumberish>;
    maxDebtPerHarvest: PromiseOrValue<BigNumberish>;
    lastReport: PromiseOrValue<BigNumberish>;
    totalDebt: PromiseOrValue<BigNumberish>;
    totalGain: PromiseOrValue<BigNumberish>;
    totalSkim: PromiseOrValue<BigNumberish>;
    totalLoss: PromiseOrValue<BigNumberish>;
    rewardsManager: PromiseOrValue<string>;
    rewards: IEverscale.EverscaleAddressStruct;
  };

  export type StrategyParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    IEverscale.EverscaleAddressStructOutput
  ] & {
    performanceFee: BigNumber;
    activation: BigNumber;
    debtRatio: BigNumber;
    minDebtPerHarvest: BigNumber;
    maxDebtPerHarvest: BigNumber;
    lastReport: BigNumber;
    totalDebt: BigNumber;
    totalGain: BigNumber;
    totalSkim: BigNumber;
    totalLoss: BigNumber;
    rewardsManager: string;
    rewards: IEverscale.EverscaleAddressStructOutput;
  };

  export type WithdrawalPeriodParamsStruct = {
    total: PromiseOrValue<BigNumberish>;
    considered: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawalPeriodParamsStructOutput = [BigNumber, BigNumber] & {
    total: BigNumber;
    considered: BigNumber;
  };
}

export interface VaultAbiInterface extends utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "addStrategy(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "apiVersion()": FunctionFragment;
    "availableDepositLimit()": FunctionFragment;
    "bridge()": FunctionFragment;
    "cancelPendingWithdrawal(uint256,uint256,(int128,uint256),uint256)": FunctionFragment;
    "configuration()": FunctionFragment;
    "convertFromTargetDecimals(uint256)": FunctionFragment;
    "convertToTargetDecimals(uint256)": FunctionFragment;
    "creditAvailable()": FunctionFragment;
    "creditAvailable(address)": FunctionFragment;
    "debtOutstanding(address)": FunctionFragment;
    "debtOutstanding()": FunctionFragment;
    "debtRatio()": FunctionFragment;
    "decodeWithdrawalEventData(bytes)": FunctionFragment;
    "deposit((int128,uint256),uint256,(address,uint256))": FunctionFragment;
    "deposit((int128,uint256),uint256)": FunctionFragment;
    "deposit((int128,uint256),uint256[],(address,uint256)[])": FunctionFragment;
    "depositFee()": FunctionFragment;
    "depositLimit()": FunctionFragment;
    "depositToFactory(uint128,int8,uint256,uint256,uint256,uint128,uint128,uint8,uint128,uint128,bytes)": FunctionFragment;
    "emergencyShutdown()": FunctionFragment;
    "expectedReturn(address)": FunctionFragment;
    "forceWithdraw((address,uint256))": FunctionFragment;
    "forceWithdraw((address,uint256)[])": FunctionFragment;
    "governance()": FunctionFragment;
    "guardian()": FunctionFragment;
    "initialize(address,address,address,uint256,(int128,uint256))": FunctionFragment;
    "lastReport()": FunctionFragment;
    "lockedProfit()": FunctionFragment;
    "lockedProfitDegradation()": FunctionFragment;
    "management()": FunctionFragment;
    "managementFee()": FunctionFragment;
    "migrateStrategy(address,address)": FunctionFragment;
    "pendingWithdrawals(address,uint256)": FunctionFragment;
    "pendingWithdrawalsPerUser(address)": FunctionFragment;
    "pendingWithdrawalsTotal()": FunctionFragment;
    "performanceFee()": FunctionFragment;
    "report(uint256,uint256,uint256)": FunctionFragment;
    "revokeStrategy()": FunctionFragment;
    "revokeStrategy(address)": FunctionFragment;
    "rewards()": FunctionFragment;
    "saveWithdraw(bytes,bytes[],uint256)": FunctionFragment;
    "saveWithdraw(bytes,bytes[])": FunctionFragment;
    "setConfiguration((int128,uint256))": FunctionFragment;
    "setDepositFee(uint256)": FunctionFragment;
    "setDepositLimit(uint256)": FunctionFragment;
    "setEmergencyShutdown(bool)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setGuardian(address)": FunctionFragment;
    "setLockedProfitDegradation(uint256)": FunctionFragment;
    "setManagement(address)": FunctionFragment;
    "setManagementFee(uint256)": FunctionFragment;
    "setPendingWithdrawalApprove((address,uint256)[],uint8[])": FunctionFragment;
    "setPendingWithdrawalApprove((address,uint256),uint8)": FunctionFragment;
    "setPendingWithdrawalBounty(uint256,uint256)": FunctionFragment;
    "setPerformanceFee(uint256)": FunctionFragment;
    "setRewards((int128,uint256))": FunctionFragment;
    "setStrategyRewards(address,(int128,uint256))": FunctionFragment;
    "setUndeclaredWithdrawLimit(uint256)": FunctionFragment;
    "setWithdrawFee(uint256)": FunctionFragment;
    "setWithdrawGuardian(address)": FunctionFragment;
    "setWithdrawLimitPerPeriod(uint256)": FunctionFragment;
    "setWithdrawalQueue(address[20])": FunctionFragment;
    "skim(address)": FunctionFragment;
    "strategies(address)": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "targetDecimals()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenDecimals()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "undeclaredWithdrawLimit()": FunctionFragment;
    "updateStrategyDebtRatio(address,uint256)": FunctionFragment;
    "updateStrategyMaxDebtPerHarvest(address,uint256)": FunctionFragment;
    "updateStrategyMinDebtPerHarvest(address,uint256)": FunctionFragment;
    "updateStrategyPerformanceFee(address,uint256)": FunctionFragment;
    "withdraw(uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "withdrawFee()": FunctionFragment;
    "withdrawGuardian()": FunctionFragment;
    "withdrawLimitPerPeriod()": FunctionFragment;
    "withdrawalIds(bytes32)": FunctionFragment;
    "withdrawalPeriods(uint256)": FunctionFragment;
    "withdrawalQueue()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGovernance"
      | "addStrategy"
      | "apiVersion"
      | "availableDepositLimit"
      | "bridge"
      | "cancelPendingWithdrawal"
      | "configuration"
      | "convertFromTargetDecimals"
      | "convertToTargetDecimals"
      | "creditAvailable()"
      | "creditAvailable(address)"
      | "debtOutstanding(address)"
      | "debtOutstanding()"
      | "debtRatio"
      | "decodeWithdrawalEventData"
      | "deposit((int128,uint256),uint256,(address,uint256))"
      | "deposit((int128,uint256),uint256)"
      | "deposit((int128,uint256),uint256[],(address,uint256)[])"
      | "depositFee"
      | "depositLimit"
      | "depositToFactory"
      | "emergencyShutdown"
      | "expectedReturn"
      | "forceWithdraw((address,uint256))"
      | "forceWithdraw((address,uint256)[])"
      | "governance"
      | "guardian"
      | "initialize"
      | "lastReport"
      | "lockedProfit"
      | "lockedProfitDegradation"
      | "management"
      | "managementFee"
      | "migrateStrategy"
      | "pendingWithdrawals"
      | "pendingWithdrawalsPerUser"
      | "pendingWithdrawalsTotal"
      | "performanceFee"
      | "report"
      | "revokeStrategy()"
      | "revokeStrategy(address)"
      | "rewards"
      | "saveWithdraw(bytes,bytes[],uint256)"
      | "saveWithdraw(bytes,bytes[])"
      | "setConfiguration"
      | "setDepositFee"
      | "setDepositLimit"
      | "setEmergencyShutdown"
      | "setGovernance"
      | "setGuardian"
      | "setLockedProfitDegradation"
      | "setManagement"
      | "setManagementFee"
      | "setPendingWithdrawalApprove((address,uint256)[],uint8[])"
      | "setPendingWithdrawalApprove((address,uint256),uint8)"
      | "setPendingWithdrawalBounty"
      | "setPerformanceFee"
      | "setRewards"
      | "setStrategyRewards"
      | "setUndeclaredWithdrawLimit"
      | "setWithdrawFee"
      | "setWithdrawGuardian"
      | "setWithdrawLimitPerPeriod"
      | "setWithdrawalQueue"
      | "skim"
      | "strategies"
      | "sweep"
      | "targetDecimals"
      | "token"
      | "tokenDecimals"
      | "totalAssets"
      | "totalDebt"
      | "undeclaredWithdrawLimit"
      | "updateStrategyDebtRatio"
      | "updateStrategyMaxDebtPerHarvest"
      | "updateStrategyMinDebtPerHarvest"
      | "updateStrategyPerformanceFee"
      | "withdraw"
      | "withdrawFee"
      | "withdrawGuardian"
      | "withdrawLimitPerPeriod"
      | "withdrawalIds"
      | "withdrawalPeriods"
      | "withdrawalQueue"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "apiVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableDepositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelPendingWithdrawal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IEverscale.EverscaleAddressStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertFromTargetDecimals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToTargetDecimals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditAvailable()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditAvailable(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "debtOutstanding(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "debtOutstanding()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeWithdrawalEventData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit((int128,uint256),uint256,(address,uint256))",
    values: [
      IEverscale.EverscaleAddressStruct,
      PromiseOrValue<BigNumberish>,
      IVault.PendingWithdrawalIdStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit((int128,uint256),uint256)",
    values: [IEverscale.EverscaleAddressStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit((int128,uint256),uint256[],(address,uint256)[])",
    values: [
      IEverscale.EverscaleAddressStruct,
      PromiseOrValue<BigNumberish>[],
      IVault.PendingWithdrawalIdStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToFactory",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectedReturn",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceWithdraw((address,uint256))",
    values: [IVault.PendingWithdrawalIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "forceWithdraw((address,uint256)[])",
    values: [IVault.PendingWithdrawalIdStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IEverscale.EverscaleAddressStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastReport",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedProfit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedProfitDegradation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "management",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managementFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateStrategy",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawalsPerUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawalsTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "report",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeStrategy()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeStrategy(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saveWithdraw(bytes,bytes[],uint256)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "saveWithdraw(bytes,bytes[])",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfiguration",
    values: [IEverscale.EverscaleAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyShutdown",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockedProfitDegradation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagement",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingWithdrawalApprove((address,uint256)[],uint8[])",
    values: [IVault.PendingWithdrawalIdStruct[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingWithdrawalApprove((address,uint256),uint8)",
    values: [IVault.PendingWithdrawalIdStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingWithdrawalBounty",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewards",
    values: [IEverscale.EverscaleAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyRewards",
    values: [PromiseOrValue<string>, IEverscale.EverscaleAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setUndeclaredWithdrawLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawLimitPerPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalQueue",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "skim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "targetDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "undeclaredWithdrawLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyDebtRatio",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyMaxDebtPerHarvest",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyMinDebtPerHarvest",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyPerformanceFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLimitPerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalIds",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalPeriods",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalQueue",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "apiVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelPendingWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertFromTargetDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToTargetDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAvailable()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAvailable(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtOutstanding(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtOutstanding()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeWithdrawalEventData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit((int128,uint256),uint256,(address,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit((int128,uint256),uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit((int128,uint256),uint256[],(address,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectedReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceWithdraw((address,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceWithdraw((address,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastReport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedProfitDegradation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "management", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawalsPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawalsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeStrategy()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeStrategy(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saveWithdraw(bytes,bytes[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveWithdraw(bytes,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockedProfitDegradation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingWithdrawalApprove((address,uint256)[],uint8[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingWithdrawalApprove((address,uint256),uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingWithdrawalBounty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUndeclaredWithdrawLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawLimitPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "undeclaredWithdrawLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyDebtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyMaxDebtPerHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyMinDebtPerHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLimitPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalQueue",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(uint256,int128,uint256)": EventFragment;
    "EmergencyShutdown(bool)": EventFragment;
    "FactoryDeposit(uint128,int8,uint256,uint256,uint256,uint128,uint128,uint8,uint128,uint128,bytes1,bytes)": EventFragment;
    "InstantWithdrawal(bytes32,address,uint256)": EventFragment;
    "NewPendingGovernance(address)": EventFragment;
    "PendingWithdrawalCancel(address,uint256,uint256)": EventFragment;
    "PendingWithdrawalCreated(address,uint256,uint256,bytes32)": EventFragment;
    "PendingWithdrawalFill(address,uint256)": EventFragment;
    "PendingWithdrawalUpdateApproveStatus(address,uint256,uint8)": EventFragment;
    "PendingWithdrawalUpdateBounty(address,uint256,uint256)": EventFragment;
    "PendingWithdrawalWithdraw(address,uint256,uint256,uint256)": EventFragment;
    "StrategyAdded(address,uint256,uint256,uint256,uint256)": EventFragment;
    "StrategyAddedToQueue(address)": EventFragment;
    "StrategyMigrated(address,address)": EventFragment;
    "StrategyRemovedFromQueue(address)": EventFragment;
    "StrategyReported(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "StrategyRevoked(address)": EventFragment;
    "StrategyUpdateDebtRatio(address,uint256)": EventFragment;
    "StrategyUpdateMaxDebtPerHarvest(address,uint256)": EventFragment;
    "StrategyUpdateMinDebtPerHarvest(address,uint256)": EventFragment;
    "StrategyUpdatePerformanceFee(address,uint256)": EventFragment;
    "StrategyUpdateRewards(address,int128,uint256)": EventFragment;
    "UpdateBridge(address)": EventFragment;
    "UpdateConfiguration(int128,uint256)": EventFragment;
    "UpdateDepositFee(uint256)": EventFragment;
    "UpdateDepositLimit(uint256)": EventFragment;
    "UpdateGovernance(address)": EventFragment;
    "UpdateGuardian(address)": EventFragment;
    "UpdateManagement(address)": EventFragment;
    "UpdateManagementFee(uint256)": EventFragment;
    "UpdatePerformanceFee(uint256)": EventFragment;
    "UpdateRewards(int128,uint256)": EventFragment;
    "UpdateTargetDecimals(uint256)": EventFragment;
    "UpdateUndeclaredWithdrawLimit(uint256)": EventFragment;
    "UpdateWithdrawFee(uint256)": EventFragment;
    "UpdateWithdrawGuardian(address)": EventFragment;
    "UpdateWithdrawLimitPerPeriod(uint256)": EventFragment;
    "UpdateWithdrawalQueue(address[20])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoryDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingWithdrawalCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingWithdrawalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingWithdrawalFill"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingWithdrawalUpdateApproveStatus"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingWithdrawalUpdateBounty"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingWithdrawalWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAddedToQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRemovedFromQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyReported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyUpdateDebtRatio"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategyUpdateMaxDebtPerHarvest"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategyUpdateMinDebtPerHarvest"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategyUpdatePerformanceFee"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyUpdateRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateBridge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateConfiguration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDepositFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDepositLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateManagement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateManagementFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePerformanceFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTargetDecimals"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateUndeclaredWithdrawLimit"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWithdrawFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWithdrawGuardian"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateWithdrawLimitPerPeriod"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWithdrawalQueue"): EventFragment;
}

export interface DepositEventObject {
  amount: BigNumber;
  wid: BigNumber;
  addr: BigNumber;
}
export type DepositEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyShutdownEventObject {
  active: boolean;
}
export type EmergencyShutdownEvent = TypedEvent<
  [boolean],
  EmergencyShutdownEventObject
>;

export type EmergencyShutdownEventFilter =
  TypedEventFilter<EmergencyShutdownEvent>;

export interface FactoryDepositEventObject {
  amount: BigNumber;
  wid: number;
  user: BigNumber;
  creditor: BigNumber;
  recipient: BigNumber;
  tokenAmount: BigNumber;
  tonAmount: BigNumber;
  swapType: number;
  slippageNumerator: BigNumber;
  slippageDenominator: BigNumber;
  separator: string;
  level3: string;
}
export type FactoryDepositEvent = TypedEvent<
  [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  FactoryDepositEventObject
>;

export type FactoryDepositEventFilter = TypedEventFilter<FactoryDepositEvent>;

export interface InstantWithdrawalEventObject {
  payloadId: string;
  recipient: string;
  amount: BigNumber;
}
export type InstantWithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  InstantWithdrawalEventObject
>;

export type InstantWithdrawalEventFilter =
  TypedEventFilter<InstantWithdrawalEvent>;

export interface NewPendingGovernanceEventObject {
  governance: string;
}
export type NewPendingGovernanceEvent = TypedEvent<
  [string],
  NewPendingGovernanceEventObject
>;

export type NewPendingGovernanceEventFilter =
  TypedEventFilter<NewPendingGovernanceEvent>;

export interface PendingWithdrawalCancelEventObject {
  recipient: string;
  id: BigNumber;
  amount: BigNumber;
}
export type PendingWithdrawalCancelEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PendingWithdrawalCancelEventObject
>;

export type PendingWithdrawalCancelEventFilter =
  TypedEventFilter<PendingWithdrawalCancelEvent>;

export interface PendingWithdrawalCreatedEventObject {
  recipient: string;
  id: BigNumber;
  amount: BigNumber;
  payloadId: string;
}
export type PendingWithdrawalCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  PendingWithdrawalCreatedEventObject
>;

export type PendingWithdrawalCreatedEventFilter =
  TypedEventFilter<PendingWithdrawalCreatedEvent>;

export interface PendingWithdrawalFillEventObject {
  recipient: string;
  id: BigNumber;
}
export type PendingWithdrawalFillEvent = TypedEvent<
  [string, BigNumber],
  PendingWithdrawalFillEventObject
>;

export type PendingWithdrawalFillEventFilter =
  TypedEventFilter<PendingWithdrawalFillEvent>;

export interface PendingWithdrawalUpdateApproveStatusEventObject {
  recipient: string;
  id: BigNumber;
  approveStatus: number;
}
export type PendingWithdrawalUpdateApproveStatusEvent = TypedEvent<
  [string, BigNumber, number],
  PendingWithdrawalUpdateApproveStatusEventObject
>;

export type PendingWithdrawalUpdateApproveStatusEventFilter =
  TypedEventFilter<PendingWithdrawalUpdateApproveStatusEvent>;

export interface PendingWithdrawalUpdateBountyEventObject {
  recipient: string;
  id: BigNumber;
  bounty: BigNumber;
}
export type PendingWithdrawalUpdateBountyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PendingWithdrawalUpdateBountyEventObject
>;

export type PendingWithdrawalUpdateBountyEventFilter =
  TypedEventFilter<PendingWithdrawalUpdateBountyEvent>;

export interface PendingWithdrawalWithdrawEventObject {
  recipient: string;
  id: BigNumber;
  requestedAmount: BigNumber;
  redeemedAmount: BigNumber;
}
export type PendingWithdrawalWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PendingWithdrawalWithdrawEventObject
>;

export type PendingWithdrawalWithdrawEventFilter =
  TypedEventFilter<PendingWithdrawalWithdrawEvent>;

export interface StrategyAddedEventObject {
  strategy: string;
  debtRatio: BigNumber;
  minDebtPerHarvest: BigNumber;
  maxDebtPerHarvest: BigNumber;
  performanceFee: BigNumber;
}
export type StrategyAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  StrategyAddedEventObject
>;

export type StrategyAddedEventFilter = TypedEventFilter<StrategyAddedEvent>;

export interface StrategyAddedToQueueEventObject {
  strategy: string;
}
export type StrategyAddedToQueueEvent = TypedEvent<
  [string],
  StrategyAddedToQueueEventObject
>;

export type StrategyAddedToQueueEventFilter =
  TypedEventFilter<StrategyAddedToQueueEvent>;

export interface StrategyMigratedEventObject {
  oldVersion: string;
  newVersion: string;
}
export type StrategyMigratedEvent = TypedEvent<
  [string, string],
  StrategyMigratedEventObject
>;

export type StrategyMigratedEventFilter =
  TypedEventFilter<StrategyMigratedEvent>;

export interface StrategyRemovedFromQueueEventObject {
  strategy: string;
}
export type StrategyRemovedFromQueueEvent = TypedEvent<
  [string],
  StrategyRemovedFromQueueEventObject
>;

export type StrategyRemovedFromQueueEventFilter =
  TypedEventFilter<StrategyRemovedFromQueueEvent>;

export interface StrategyReportedEventObject {
  strategy: string;
  gain: BigNumber;
  loss: BigNumber;
  debtPaid: BigNumber;
  totalGain: BigNumber;
  totalSkim: BigNumber;
  totalLoss: BigNumber;
  totalDebt: BigNumber;
  debtAdded: BigNumber;
  debtRatio: BigNumber;
}
export type StrategyReportedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  StrategyReportedEventObject
>;

export type StrategyReportedEventFilter =
  TypedEventFilter<StrategyReportedEvent>;

export interface StrategyRevokedEventObject {
  strategy: string;
}
export type StrategyRevokedEvent = TypedEvent<
  [string],
  StrategyRevokedEventObject
>;

export type StrategyRevokedEventFilter = TypedEventFilter<StrategyRevokedEvent>;

export interface StrategyUpdateDebtRatioEventObject {
  strategy: string;
  debtRatio: BigNumber;
}
export type StrategyUpdateDebtRatioEvent = TypedEvent<
  [string, BigNumber],
  StrategyUpdateDebtRatioEventObject
>;

export type StrategyUpdateDebtRatioEventFilter =
  TypedEventFilter<StrategyUpdateDebtRatioEvent>;

export interface StrategyUpdateMaxDebtPerHarvestEventObject {
  strategy: string;
  maxDebtPerHarvest: BigNumber;
}
export type StrategyUpdateMaxDebtPerHarvestEvent = TypedEvent<
  [string, BigNumber],
  StrategyUpdateMaxDebtPerHarvestEventObject
>;

export type StrategyUpdateMaxDebtPerHarvestEventFilter =
  TypedEventFilter<StrategyUpdateMaxDebtPerHarvestEvent>;

export interface StrategyUpdateMinDebtPerHarvestEventObject {
  strategy: string;
  minDebtPerHarvest: BigNumber;
}
export type StrategyUpdateMinDebtPerHarvestEvent = TypedEvent<
  [string, BigNumber],
  StrategyUpdateMinDebtPerHarvestEventObject
>;

export type StrategyUpdateMinDebtPerHarvestEventFilter =
  TypedEventFilter<StrategyUpdateMinDebtPerHarvestEvent>;

export interface StrategyUpdatePerformanceFeeEventObject {
  strategy: string;
  performanceFee: BigNumber;
}
export type StrategyUpdatePerformanceFeeEvent = TypedEvent<
  [string, BigNumber],
  StrategyUpdatePerformanceFeeEventObject
>;

export type StrategyUpdatePerformanceFeeEventFilter =
  TypedEventFilter<StrategyUpdatePerformanceFeeEvent>;

export interface StrategyUpdateRewardsEventObject {
  strategyId: string;
  wid: BigNumber;
  addr: BigNumber;
}
export type StrategyUpdateRewardsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StrategyUpdateRewardsEventObject
>;

export type StrategyUpdateRewardsEventFilter =
  TypedEventFilter<StrategyUpdateRewardsEvent>;

export interface UpdateBridgeEventObject {
  bridge: string;
}
export type UpdateBridgeEvent = TypedEvent<[string], UpdateBridgeEventObject>;

export type UpdateBridgeEventFilter = TypedEventFilter<UpdateBridgeEvent>;

export interface UpdateConfigurationEventObject {
  wid: BigNumber;
  addr: BigNumber;
}
export type UpdateConfigurationEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateConfigurationEventObject
>;

export type UpdateConfigurationEventFilter =
  TypedEventFilter<UpdateConfigurationEvent>;

export interface UpdateDepositFeeEventObject {
  fee: BigNumber;
}
export type UpdateDepositFeeEvent = TypedEvent<
  [BigNumber],
  UpdateDepositFeeEventObject
>;

export type UpdateDepositFeeEventFilter =
  TypedEventFilter<UpdateDepositFeeEvent>;

export interface UpdateDepositLimitEventObject {
  depositLimit: BigNumber;
}
export type UpdateDepositLimitEvent = TypedEvent<
  [BigNumber],
  UpdateDepositLimitEventObject
>;

export type UpdateDepositLimitEventFilter =
  TypedEventFilter<UpdateDepositLimitEvent>;

export interface UpdateGovernanceEventObject {
  governance: string;
}
export type UpdateGovernanceEvent = TypedEvent<
  [string],
  UpdateGovernanceEventObject
>;

export type UpdateGovernanceEventFilter =
  TypedEventFilter<UpdateGovernanceEvent>;

export interface UpdateGuardianEventObject {
  guardian: string;
}
export type UpdateGuardianEvent = TypedEvent<
  [string],
  UpdateGuardianEventObject
>;

export type UpdateGuardianEventFilter = TypedEventFilter<UpdateGuardianEvent>;

export interface UpdateManagementEventObject {
  management: string;
}
export type UpdateManagementEvent = TypedEvent<
  [string],
  UpdateManagementEventObject
>;

export type UpdateManagementEventFilter =
  TypedEventFilter<UpdateManagementEvent>;

export interface UpdateManagementFeeEventObject {
  managenentFee: BigNumber;
}
export type UpdateManagementFeeEvent = TypedEvent<
  [BigNumber],
  UpdateManagementFeeEventObject
>;

export type UpdateManagementFeeEventFilter =
  TypedEventFilter<UpdateManagementFeeEvent>;

export interface UpdatePerformanceFeeEventObject {
  performanceFee: BigNumber;
}
export type UpdatePerformanceFeeEvent = TypedEvent<
  [BigNumber],
  UpdatePerformanceFeeEventObject
>;

export type UpdatePerformanceFeeEventFilter =
  TypedEventFilter<UpdatePerformanceFeeEvent>;

export interface UpdateRewardsEventObject {
  wid: BigNumber;
  addr: BigNumber;
}
export type UpdateRewardsEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateRewardsEventObject
>;

export type UpdateRewardsEventFilter = TypedEventFilter<UpdateRewardsEvent>;

export interface UpdateTargetDecimalsEventObject {
  targetDecimals: BigNumber;
}
export type UpdateTargetDecimalsEvent = TypedEvent<
  [BigNumber],
  UpdateTargetDecimalsEventObject
>;

export type UpdateTargetDecimalsEventFilter =
  TypedEventFilter<UpdateTargetDecimalsEvent>;

export interface UpdateUndeclaredWithdrawLimitEventObject {
  undeclaredWithdrawLimit: BigNumber;
}
export type UpdateUndeclaredWithdrawLimitEvent = TypedEvent<
  [BigNumber],
  UpdateUndeclaredWithdrawLimitEventObject
>;

export type UpdateUndeclaredWithdrawLimitEventFilter =
  TypedEventFilter<UpdateUndeclaredWithdrawLimitEvent>;

export interface UpdateWithdrawFeeEventObject {
  fee: BigNumber;
}
export type UpdateWithdrawFeeEvent = TypedEvent<
  [BigNumber],
  UpdateWithdrawFeeEventObject
>;

export type UpdateWithdrawFeeEventFilter =
  TypedEventFilter<UpdateWithdrawFeeEvent>;

export interface UpdateWithdrawGuardianEventObject {
  withdrawGuardian: string;
}
export type UpdateWithdrawGuardianEvent = TypedEvent<
  [string],
  UpdateWithdrawGuardianEventObject
>;

export type UpdateWithdrawGuardianEventFilter =
  TypedEventFilter<UpdateWithdrawGuardianEvent>;

export interface UpdateWithdrawLimitPerPeriodEventObject {
  withdrawLimitPerPeriod: BigNumber;
}
export type UpdateWithdrawLimitPerPeriodEvent = TypedEvent<
  [BigNumber],
  UpdateWithdrawLimitPerPeriodEventObject
>;

export type UpdateWithdrawLimitPerPeriodEventFilter =
  TypedEventFilter<UpdateWithdrawLimitPerPeriodEvent>;

export interface UpdateWithdrawalQueueEventObject {
  queue: string[];
}
export type UpdateWithdrawalQueueEvent = TypedEvent<
  [string[]],
  UpdateWithdrawalQueueEventObject
>;

export type UpdateWithdrawalQueueEventFilter =
  TypedEventFilter<UpdateWithdrawalQueueEvent>;

export interface VaultAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addStrategy(
      strategyId: PromiseOrValue<string>,
      _debtRatio: PromiseOrValue<BigNumberish>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    apiVersion(
      overrides?: CallOverrides
    ): Promise<[string] & { api_version: string }>;

    availableDepositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    cancelPendingWithdrawal(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: IEverscale.EverscaleAddressStruct,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configuration(
      overrides?: CallOverrides
    ): Promise<[IEverscale.EverscaleAddressStructOutput]>;

    convertFromTargetDecimals(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertToTargetDecimals(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "creditAvailable()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "creditAvailable(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "debtOutstanding(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "debtOutstanding()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    decodeWithdrawalEventData(
      eventData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IVaultBasic.WithdrawalParamsStructOutput]>;

    "deposit((int128,uint256),uint256,(address,uint256))"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>,
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit((int128,uint256),uint256)"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit((int128,uint256),uint256[],(address,uint256)[])"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>[],
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositToFactory(
      amount: PromiseOrValue<BigNumberish>,
      wid: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<BigNumberish>,
      creditor: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BigNumberish>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tonAmount: PromiseOrValue<BigNumberish>,
      swapType: PromiseOrValue<BigNumberish>,
      slippageNumerator: PromiseOrValue<BigNumberish>,
      slippageDenominator: PromiseOrValue<BigNumberish>,
      level3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    expectedReturn(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "forceWithdraw((address,uint256))"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "forceWithdraw((address,uint256)[])"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _token: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      _targetDecimals: PromiseOrValue<BigNumberish>,
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastReport(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedProfit(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedProfitDegradation(overrides?: CallOverrides): Promise<[BigNumber]>;

    management(overrides?: CallOverrides): Promise<[string]>;

    managementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateStrategy(
      oldVersion: PromiseOrValue<string>,
      newVersion: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingWithdrawals(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IVault.PendingWithdrawalParamsStructOutput]>;

    pendingWithdrawalsPerUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingWithdrawalsTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    report(
      gain: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      _debtPayment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "revokeStrategy()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "revokeStrategy(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewards(
      overrides?: CallOverrides
    ): Promise<[IEverscale.EverscaleAddressStructOutput]>;

    "saveWithdraw(bytes,bytes[],uint256)"(
      payload: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "saveWithdraw(bytes,bytes[])"(
      payload: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfiguration(
      _configuration: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEmergencyShutdown(
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLockedProfitDegradation(
      degradation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManagement(
      _management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManagementFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPendingWithdrawalApprove((address,uint256)[],uint8[])"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      approveStatus: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPendingWithdrawalApprove((address,uint256),uint8)"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      approveStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingWithdrawalBounty(
      id: PromiseOrValue<BigNumberish>,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewards(
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategyRewards(
      strategyId: PromiseOrValue<string>,
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUndeclaredWithdrawLimit(
      _undeclaredWithdrawLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      _withdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawGuardian(
      _withdrawGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawLimitPerPeriod(
      _withdrawLimitPerPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalQueue(
      queue: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    skim(
      strategyId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strategies(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IVault.StrategyParamsStructOutput]>;

    sweep(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    targetDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    undeclaredWithdrawLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateStrategyDebtRatio(
      strategyId: PromiseOrValue<string>,
      _debtRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStrategyMaxDebtPerHarvest(
      strategyId: PromiseOrValue<string>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStrategyMinDebtPerHarvest(
      strategyId: PromiseOrValue<string>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStrategyPerformanceFee(
      strategyId: PromiseOrValue<string>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      amountRequested: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      maxLoss: PromiseOrValue<BigNumberish>,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawGuardian(overrides?: CallOverrides): Promise<[string]>;

    withdrawLimitPerPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalIds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawalPeriods(
      withdrawalPeriodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IVault.WithdrawalPeriodParamsStructOutput]>;

    withdrawalQueue(overrides?: CallOverrides): Promise<[string[]]>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addStrategy(
    strategyId: PromiseOrValue<string>,
    _debtRatio: PromiseOrValue<BigNumberish>,
    minDebtPerHarvest: PromiseOrValue<BigNumberish>,
    maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
    _performanceFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  apiVersion(overrides?: CallOverrides): Promise<string>;

  availableDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  bridge(overrides?: CallOverrides): Promise<string>;

  cancelPendingWithdrawal(
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    recipient: IEverscale.EverscaleAddressStruct,
    bounty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configuration(
    overrides?: CallOverrides
  ): Promise<IEverscale.EverscaleAddressStructOutput>;

  convertFromTargetDecimals(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToTargetDecimals(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "creditAvailable()"(overrides?: CallOverrides): Promise<BigNumber>;

  "creditAvailable(address)"(
    strategyId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "debtOutstanding(address)"(
    strategyId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "debtOutstanding()"(overrides?: CallOverrides): Promise<BigNumber>;

  debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

  decodeWithdrawalEventData(
    eventData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IVaultBasic.WithdrawalParamsStructOutput>;

  "deposit((int128,uint256),uint256,(address,uint256))"(
    recipient: IEverscale.EverscaleAddressStruct,
    amount: PromiseOrValue<BigNumberish>,
    pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit((int128,uint256),uint256)"(
    recipient: IEverscale.EverscaleAddressStruct,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit((int128,uint256),uint256[],(address,uint256)[])"(
    recipient: IEverscale.EverscaleAddressStruct,
    amount: PromiseOrValue<BigNumberish>[],
    pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  depositToFactory(
    amount: PromiseOrValue<BigNumberish>,
    wid: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<BigNumberish>,
    creditor: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<BigNumberish>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    tonAmount: PromiseOrValue<BigNumberish>,
    swapType: PromiseOrValue<BigNumberish>,
    slippageNumerator: PromiseOrValue<BigNumberish>,
    slippageDenominator: PromiseOrValue<BigNumberish>,
    level3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyShutdown(overrides?: CallOverrides): Promise<boolean>;

  expectedReturn(
    strategyId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "forceWithdraw((address,uint256))"(
    pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "forceWithdraw((address,uint256)[])"(
    pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  initialize(
    _token: PromiseOrValue<string>,
    _bridge: PromiseOrValue<string>,
    _governance: PromiseOrValue<string>,
    _targetDecimals: PromiseOrValue<BigNumberish>,
    _rewards: IEverscale.EverscaleAddressStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastReport(overrides?: CallOverrides): Promise<BigNumber>;

  lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

  lockedProfitDegradation(overrides?: CallOverrides): Promise<BigNumber>;

  management(overrides?: CallOverrides): Promise<string>;

  managementFee(overrides?: CallOverrides): Promise<BigNumber>;

  migrateStrategy(
    oldVersion: PromiseOrValue<string>,
    newVersion: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingWithdrawals(
    user: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IVault.PendingWithdrawalParamsStructOutput>;

  pendingWithdrawalsPerUser(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingWithdrawalsTotal(overrides?: CallOverrides): Promise<BigNumber>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  report(
    gain: PromiseOrValue<BigNumberish>,
    loss: PromiseOrValue<BigNumberish>,
    _debtPayment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "revokeStrategy()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "revokeStrategy(address)"(
    strategyId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewards(
    overrides?: CallOverrides
  ): Promise<IEverscale.EverscaleAddressStructOutput>;

  "saveWithdraw(bytes,bytes[],uint256)"(
    payload: PromiseOrValue<BytesLike>,
    signatures: PromiseOrValue<BytesLike>[],
    bounty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "saveWithdraw(bytes,bytes[])"(
    payload: PromiseOrValue<BytesLike>,
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfiguration(
    _configuration: IEverscale.EverscaleAddressStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositFee(
    _depositFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositLimit(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEmergencyShutdown(
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGuardian(
    _guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLockedProfitDegradation(
    degradation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManagement(
    _management: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManagementFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPendingWithdrawalApprove((address,uint256)[],uint8[])"(
    pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
    approveStatus: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPendingWithdrawalApprove((address,uint256),uint8)"(
    pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
    approveStatus: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingWithdrawalBounty(
    id: PromiseOrValue<BigNumberish>,
    bounty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewards(
    _rewards: IEverscale.EverscaleAddressStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategyRewards(
    strategyId: PromiseOrValue<string>,
    _rewards: IEverscale.EverscaleAddressStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUndeclaredWithdrawLimit(
    _undeclaredWithdrawLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    _withdrawFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawGuardian(
    _withdrawGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawLimitPerPeriod(
    _withdrawLimitPerPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalQueue(
    queue: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  skim(
    strategyId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strategies(
    strategyId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IVault.StrategyParamsStructOutput>;

  sweep(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  targetDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  undeclaredWithdrawLimit(overrides?: CallOverrides): Promise<BigNumber>;

  updateStrategyDebtRatio(
    strategyId: PromiseOrValue<string>,
    _debtRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStrategyMaxDebtPerHarvest(
    strategyId: PromiseOrValue<string>,
    maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStrategyMinDebtPerHarvest(
    strategyId: PromiseOrValue<string>,
    minDebtPerHarvest: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStrategyPerformanceFee(
    strategyId: PromiseOrValue<string>,
    _performanceFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    id: PromiseOrValue<BigNumberish>,
    amountRequested: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    maxLoss: PromiseOrValue<BigNumberish>,
    bounty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawGuardian(overrides?: CallOverrides): Promise<string>;

  withdrawLimitPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalIds(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawalPeriods(
    withdrawalPeriodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IVault.WithdrawalPeriodParamsStructOutput>;

  withdrawalQueue(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    addStrategy(
      strategyId: PromiseOrValue<string>,
      _debtRatio: PromiseOrValue<BigNumberish>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    apiVersion(overrides?: CallOverrides): Promise<string>;

    availableDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<string>;

    cancelPendingWithdrawal(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: IEverscale.EverscaleAddressStruct,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    configuration(
      overrides?: CallOverrides
    ): Promise<IEverscale.EverscaleAddressStructOutput>;

    convertFromTargetDecimals(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToTargetDecimals(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditAvailable()"(overrides?: CallOverrides): Promise<BigNumber>;

    "creditAvailable(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtOutstanding(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtOutstanding()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    decodeWithdrawalEventData(
      eventData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IVaultBasic.WithdrawalParamsStructOutput>;

    "deposit((int128,uint256),uint256,(address,uint256))"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>,
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit((int128,uint256),uint256)"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit((int128,uint256),uint256[],(address,uint256)[])"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>[],
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    depositToFactory(
      amount: PromiseOrValue<BigNumberish>,
      wid: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<BigNumberish>,
      creditor: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BigNumberish>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tonAmount: PromiseOrValue<BigNumberish>,
      swapType: PromiseOrValue<BigNumberish>,
      slippageNumerator: PromiseOrValue<BigNumberish>,
      slippageDenominator: PromiseOrValue<BigNumberish>,
      level3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyShutdown(overrides?: CallOverrides): Promise<boolean>;

    expectedReturn(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "forceWithdraw((address,uint256))"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "forceWithdraw((address,uint256)[])"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    governance(overrides?: CallOverrides): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    initialize(
      _token: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      _targetDecimals: PromiseOrValue<BigNumberish>,
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lastReport(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfitDegradation(overrides?: CallOverrides): Promise<BigNumber>;

    management(overrides?: CallOverrides): Promise<string>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    migrateStrategy(
      oldVersion: PromiseOrValue<string>,
      newVersion: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingWithdrawals(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IVault.PendingWithdrawalParamsStructOutput>;

    pendingWithdrawalsPerUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingWithdrawalsTotal(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    report(
      gain: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      _debtPayment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "revokeStrategy()"(overrides?: CallOverrides): Promise<void>;

    "revokeStrategy(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewards(
      overrides?: CallOverrides
    ): Promise<IEverscale.EverscaleAddressStructOutput>;

    "saveWithdraw(bytes,bytes[],uint256)"(
      payload: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "saveWithdraw(bytes,bytes[])"(
      payload: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [boolean, IVault.PendingWithdrawalIdStructOutput] & {
        instantWithdrawal: boolean;
        pendingWithdrawalId: IVault.PendingWithdrawalIdStructOutput;
      }
    >;

    setConfiguration(
      _configuration: IEverscale.EverscaleAddressStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyShutdown(
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockedProfitDegradation(
      degradation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagement(
      _management: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagementFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingWithdrawalApprove((address,uint256)[],uint8[])"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      approveStatus: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingWithdrawalApprove((address,uint256),uint8)"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      approveStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingWithdrawalBounty(
      id: PromiseOrValue<BigNumberish>,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyRewards(
      strategyId: PromiseOrValue<string>,
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setUndeclaredWithdrawLimit(
      _undeclaredWithdrawLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFee(
      _withdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawGuardian(
      _withdrawGuardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawLimitPerPeriod(
      _withdrawLimitPerPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalQueue(
      queue: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    skim(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IVault.StrategyParamsStructOutput>;

    sweep(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    targetDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    undeclaredWithdrawLimit(overrides?: CallOverrides): Promise<BigNumber>;

    updateStrategyDebtRatio(
      strategyId: PromiseOrValue<string>,
      _debtRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStrategyMaxDebtPerHarvest(
      strategyId: PromiseOrValue<string>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStrategyMinDebtPerHarvest(
      strategyId: PromiseOrValue<string>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStrategyPerformanceFee(
      strategyId: PromiseOrValue<string>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      amountRequested: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      maxLoss: PromiseOrValue<BigNumberish>,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawGuardian(overrides?: CallOverrides): Promise<string>;

    withdrawLimitPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalIds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawalPeriods(
      withdrawalPeriodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IVault.WithdrawalPeriodParamsStructOutput>;

    withdrawalQueue(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "Deposit(uint256,int128,uint256)"(
      amount?: null,
      wid?: null,
      addr?: null
    ): DepositEventFilter;
    Deposit(amount?: null, wid?: null, addr?: null): DepositEventFilter;

    "EmergencyShutdown(bool)"(active?: null): EmergencyShutdownEventFilter;
    EmergencyShutdown(active?: null): EmergencyShutdownEventFilter;

    "FactoryDeposit(uint128,int8,uint256,uint256,uint256,uint128,uint128,uint8,uint128,uint128,bytes1,bytes)"(
      amount?: null,
      wid?: null,
      user?: null,
      creditor?: null,
      recipient?: null,
      tokenAmount?: null,
      tonAmount?: null,
      swapType?: null,
      slippageNumerator?: null,
      slippageDenominator?: null,
      separator?: null,
      level3?: null
    ): FactoryDepositEventFilter;
    FactoryDeposit(
      amount?: null,
      wid?: null,
      user?: null,
      creditor?: null,
      recipient?: null,
      tokenAmount?: null,
      tonAmount?: null,
      swapType?: null,
      slippageNumerator?: null,
      slippageDenominator?: null,
      separator?: null,
      level3?: null
    ): FactoryDepositEventFilter;

    "InstantWithdrawal(bytes32,address,uint256)"(
      payloadId?: null,
      recipient?: null,
      amount?: null
    ): InstantWithdrawalEventFilter;
    InstantWithdrawal(
      payloadId?: null,
      recipient?: null,
      amount?: null
    ): InstantWithdrawalEventFilter;

    "NewPendingGovernance(address)"(
      governance?: null
    ): NewPendingGovernanceEventFilter;
    NewPendingGovernance(governance?: null): NewPendingGovernanceEventFilter;

    "PendingWithdrawalCancel(address,uint256,uint256)"(
      recipient?: null,
      id?: null,
      amount?: null
    ): PendingWithdrawalCancelEventFilter;
    PendingWithdrawalCancel(
      recipient?: null,
      id?: null,
      amount?: null
    ): PendingWithdrawalCancelEventFilter;

    "PendingWithdrawalCreated(address,uint256,uint256,bytes32)"(
      recipient?: null,
      id?: null,
      amount?: null,
      payloadId?: null
    ): PendingWithdrawalCreatedEventFilter;
    PendingWithdrawalCreated(
      recipient?: null,
      id?: null,
      amount?: null,
      payloadId?: null
    ): PendingWithdrawalCreatedEventFilter;

    "PendingWithdrawalFill(address,uint256)"(
      recipient?: null,
      id?: null
    ): PendingWithdrawalFillEventFilter;
    PendingWithdrawalFill(
      recipient?: null,
      id?: null
    ): PendingWithdrawalFillEventFilter;

    "PendingWithdrawalUpdateApproveStatus(address,uint256,uint8)"(
      recipient?: null,
      id?: null,
      approveStatus?: null
    ): PendingWithdrawalUpdateApproveStatusEventFilter;
    PendingWithdrawalUpdateApproveStatus(
      recipient?: null,
      id?: null,
      approveStatus?: null
    ): PendingWithdrawalUpdateApproveStatusEventFilter;

    "PendingWithdrawalUpdateBounty(address,uint256,uint256)"(
      recipient?: null,
      id?: null,
      bounty?: null
    ): PendingWithdrawalUpdateBountyEventFilter;
    PendingWithdrawalUpdateBounty(
      recipient?: null,
      id?: null,
      bounty?: null
    ): PendingWithdrawalUpdateBountyEventFilter;

    "PendingWithdrawalWithdraw(address,uint256,uint256,uint256)"(
      recipient?: null,
      id?: null,
      requestedAmount?: null,
      redeemedAmount?: null
    ): PendingWithdrawalWithdrawEventFilter;
    PendingWithdrawalWithdraw(
      recipient?: null,
      id?: null,
      requestedAmount?: null,
      redeemedAmount?: null
    ): PendingWithdrawalWithdrawEventFilter;

    "StrategyAdded(address,uint256,uint256,uint256,uint256)"(
      strategy?: PromiseOrValue<string> | null,
      debtRatio?: null,
      minDebtPerHarvest?: null,
      maxDebtPerHarvest?: null,
      performanceFee?: null
    ): StrategyAddedEventFilter;
    StrategyAdded(
      strategy?: PromiseOrValue<string> | null,
      debtRatio?: null,
      minDebtPerHarvest?: null,
      maxDebtPerHarvest?: null,
      performanceFee?: null
    ): StrategyAddedEventFilter;

    "StrategyAddedToQueue(address)"(
      strategy?: PromiseOrValue<string> | null
    ): StrategyAddedToQueueEventFilter;
    StrategyAddedToQueue(
      strategy?: PromiseOrValue<string> | null
    ): StrategyAddedToQueueEventFilter;

    "StrategyMigrated(address,address)"(
      oldVersion?: PromiseOrValue<string> | null,
      newVersion?: PromiseOrValue<string> | null
    ): StrategyMigratedEventFilter;
    StrategyMigrated(
      oldVersion?: PromiseOrValue<string> | null,
      newVersion?: PromiseOrValue<string> | null
    ): StrategyMigratedEventFilter;

    "StrategyRemovedFromQueue(address)"(
      strategy?: PromiseOrValue<string> | null
    ): StrategyRemovedFromQueueEventFilter;
    StrategyRemovedFromQueue(
      strategy?: PromiseOrValue<string> | null
    ): StrategyRemovedFromQueueEventFilter;

    "StrategyReported(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      strategy?: PromiseOrValue<string> | null,
      gain?: null,
      loss?: null,
      debtPaid?: null,
      totalGain?: null,
      totalSkim?: null,
      totalLoss?: null,
      totalDebt?: null,
      debtAdded?: null,
      debtRatio?: null
    ): StrategyReportedEventFilter;
    StrategyReported(
      strategy?: PromiseOrValue<string> | null,
      gain?: null,
      loss?: null,
      debtPaid?: null,
      totalGain?: null,
      totalSkim?: null,
      totalLoss?: null,
      totalDebt?: null,
      debtAdded?: null,
      debtRatio?: null
    ): StrategyReportedEventFilter;

    "StrategyRevoked(address)"(
      strategy?: PromiseOrValue<string> | null
    ): StrategyRevokedEventFilter;
    StrategyRevoked(
      strategy?: PromiseOrValue<string> | null
    ): StrategyRevokedEventFilter;

    "StrategyUpdateDebtRatio(address,uint256)"(
      strategy?: PromiseOrValue<string> | null,
      debtRatio?: null
    ): StrategyUpdateDebtRatioEventFilter;
    StrategyUpdateDebtRatio(
      strategy?: PromiseOrValue<string> | null,
      debtRatio?: null
    ): StrategyUpdateDebtRatioEventFilter;

    "StrategyUpdateMaxDebtPerHarvest(address,uint256)"(
      strategy?: PromiseOrValue<string> | null,
      maxDebtPerHarvest?: null
    ): StrategyUpdateMaxDebtPerHarvestEventFilter;
    StrategyUpdateMaxDebtPerHarvest(
      strategy?: PromiseOrValue<string> | null,
      maxDebtPerHarvest?: null
    ): StrategyUpdateMaxDebtPerHarvestEventFilter;

    "StrategyUpdateMinDebtPerHarvest(address,uint256)"(
      strategy?: PromiseOrValue<string> | null,
      minDebtPerHarvest?: null
    ): StrategyUpdateMinDebtPerHarvestEventFilter;
    StrategyUpdateMinDebtPerHarvest(
      strategy?: PromiseOrValue<string> | null,
      minDebtPerHarvest?: null
    ): StrategyUpdateMinDebtPerHarvestEventFilter;

    "StrategyUpdatePerformanceFee(address,uint256)"(
      strategy?: PromiseOrValue<string> | null,
      performanceFee?: null
    ): StrategyUpdatePerformanceFeeEventFilter;
    StrategyUpdatePerformanceFee(
      strategy?: PromiseOrValue<string> | null,
      performanceFee?: null
    ): StrategyUpdatePerformanceFeeEventFilter;

    "StrategyUpdateRewards(address,int128,uint256)"(
      strategyId?: null,
      wid?: null,
      addr?: null
    ): StrategyUpdateRewardsEventFilter;
    StrategyUpdateRewards(
      strategyId?: null,
      wid?: null,
      addr?: null
    ): StrategyUpdateRewardsEventFilter;

    "UpdateBridge(address)"(bridge?: null): UpdateBridgeEventFilter;
    UpdateBridge(bridge?: null): UpdateBridgeEventFilter;

    "UpdateConfiguration(int128,uint256)"(
      wid?: null,
      addr?: null
    ): UpdateConfigurationEventFilter;
    UpdateConfiguration(
      wid?: null,
      addr?: null
    ): UpdateConfigurationEventFilter;

    "UpdateDepositFee(uint256)"(fee?: null): UpdateDepositFeeEventFilter;
    UpdateDepositFee(fee?: null): UpdateDepositFeeEventFilter;

    "UpdateDepositLimit(uint256)"(
      depositLimit?: null
    ): UpdateDepositLimitEventFilter;
    UpdateDepositLimit(depositLimit?: null): UpdateDepositLimitEventFilter;

    "UpdateGovernance(address)"(governance?: null): UpdateGovernanceEventFilter;
    UpdateGovernance(governance?: null): UpdateGovernanceEventFilter;

    "UpdateGuardian(address)"(guardian?: null): UpdateGuardianEventFilter;
    UpdateGuardian(guardian?: null): UpdateGuardianEventFilter;

    "UpdateManagement(address)"(management?: null): UpdateManagementEventFilter;
    UpdateManagement(management?: null): UpdateManagementEventFilter;

    "UpdateManagementFee(uint256)"(
      managenentFee?: null
    ): UpdateManagementFeeEventFilter;
    UpdateManagementFee(managenentFee?: null): UpdateManagementFeeEventFilter;

    "UpdatePerformanceFee(uint256)"(
      performanceFee?: null
    ): UpdatePerformanceFeeEventFilter;
    UpdatePerformanceFee(
      performanceFee?: null
    ): UpdatePerformanceFeeEventFilter;

    "UpdateRewards(int128,uint256)"(
      wid?: null,
      addr?: null
    ): UpdateRewardsEventFilter;
    UpdateRewards(wid?: null, addr?: null): UpdateRewardsEventFilter;

    "UpdateTargetDecimals(uint256)"(
      targetDecimals?: null
    ): UpdateTargetDecimalsEventFilter;
    UpdateTargetDecimals(
      targetDecimals?: null
    ): UpdateTargetDecimalsEventFilter;

    "UpdateUndeclaredWithdrawLimit(uint256)"(
      undeclaredWithdrawLimit?: null
    ): UpdateUndeclaredWithdrawLimitEventFilter;
    UpdateUndeclaredWithdrawLimit(
      undeclaredWithdrawLimit?: null
    ): UpdateUndeclaredWithdrawLimitEventFilter;

    "UpdateWithdrawFee(uint256)"(fee?: null): UpdateWithdrawFeeEventFilter;
    UpdateWithdrawFee(fee?: null): UpdateWithdrawFeeEventFilter;

    "UpdateWithdrawGuardian(address)"(
      withdrawGuardian?: null
    ): UpdateWithdrawGuardianEventFilter;
    UpdateWithdrawGuardian(
      withdrawGuardian?: null
    ): UpdateWithdrawGuardianEventFilter;

    "UpdateWithdrawLimitPerPeriod(uint256)"(
      withdrawLimitPerPeriod?: null
    ): UpdateWithdrawLimitPerPeriodEventFilter;
    UpdateWithdrawLimitPerPeriod(
      withdrawLimitPerPeriod?: null
    ): UpdateWithdrawLimitPerPeriodEventFilter;

    "UpdateWithdrawalQueue(address[20])"(
      queue?: null
    ): UpdateWithdrawalQueueEventFilter;
    UpdateWithdrawalQueue(queue?: null): UpdateWithdrawalQueueEventFilter;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addStrategy(
      strategyId: PromiseOrValue<string>,
      _debtRatio: PromiseOrValue<BigNumberish>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    apiVersion(overrides?: CallOverrides): Promise<BigNumber>;

    availableDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    cancelPendingWithdrawal(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: IEverscale.EverscaleAddressStruct,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configuration(overrides?: CallOverrides): Promise<BigNumber>;

    convertFromTargetDecimals(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToTargetDecimals(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditAvailable()"(overrides?: CallOverrides): Promise<BigNumber>;

    "creditAvailable(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtOutstanding(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtOutstanding()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    decodeWithdrawalEventData(
      eventData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit((int128,uint256),uint256,(address,uint256))"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>,
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit((int128,uint256),uint256)"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit((int128,uint256),uint256[],(address,uint256)[])"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>[],
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    depositToFactory(
      amount: PromiseOrValue<BigNumberish>,
      wid: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<BigNumberish>,
      creditor: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BigNumberish>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tonAmount: PromiseOrValue<BigNumberish>,
      swapType: PromiseOrValue<BigNumberish>,
      slippageNumerator: PromiseOrValue<BigNumberish>,
      slippageDenominator: PromiseOrValue<BigNumberish>,
      level3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    expectedReturn(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "forceWithdraw((address,uint256))"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "forceWithdraw((address,uint256)[])"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      _targetDecimals: PromiseOrValue<BigNumberish>,
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastReport(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfitDegradation(overrides?: CallOverrides): Promise<BigNumber>;

    management(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    migrateStrategy(
      oldVersion: PromiseOrValue<string>,
      newVersion: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingWithdrawals(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingWithdrawalsPerUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingWithdrawalsTotal(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    report(
      gain: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      _debtPayment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "revokeStrategy()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "revokeStrategy(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    "saveWithdraw(bytes,bytes[],uint256)"(
      payload: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "saveWithdraw(bytes,bytes[])"(
      payload: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfiguration(
      _configuration: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEmergencyShutdown(
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLockedProfitDegradation(
      degradation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManagement(
      _management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManagementFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPendingWithdrawalApprove((address,uint256)[],uint8[])"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      approveStatus: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPendingWithdrawalApprove((address,uint256),uint8)"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      approveStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingWithdrawalBounty(
      id: PromiseOrValue<BigNumberish>,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPerformanceFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewards(
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategyRewards(
      strategyId: PromiseOrValue<string>,
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUndeclaredWithdrawLimit(
      _undeclaredWithdrawLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawFee(
      _withdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawGuardian(
      _withdrawGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawLimitPerPeriod(
      _withdrawLimitPerPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalQueue(
      queue: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    skim(
      strategyId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strategies(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sweep(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    targetDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    undeclaredWithdrawLimit(overrides?: CallOverrides): Promise<BigNumber>;

    updateStrategyDebtRatio(
      strategyId: PromiseOrValue<string>,
      _debtRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStrategyMaxDebtPerHarvest(
      strategyId: PromiseOrValue<string>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStrategyMinDebtPerHarvest(
      strategyId: PromiseOrValue<string>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStrategyPerformanceFee(
      strategyId: PromiseOrValue<string>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      amountRequested: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      maxLoss: PromiseOrValue<BigNumberish>,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLimitPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalIds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalPeriods(
      withdrawalPeriodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalQueue(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addStrategy(
      strategyId: PromiseOrValue<string>,
      _debtRatio: PromiseOrValue<BigNumberish>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    apiVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableDepositLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelPendingWithdrawal(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: IEverscale.EverscaleAddressStruct,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertFromTargetDecimals(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToTargetDecimals(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditAvailable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditAvailable(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtOutstanding(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtOutstanding()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeWithdrawalEventData(
      eventData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposit((int128,uint256),uint256,(address,uint256))"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>,
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit((int128,uint256),uint256)"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit((int128,uint256),uint256[],(address,uint256)[])"(
      recipient: IEverscale.EverscaleAddressStruct,
      amount: PromiseOrValue<BigNumberish>[],
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositToFactory(
      amount: PromiseOrValue<BigNumberish>,
      wid: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<BigNumberish>,
      creditor: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BigNumberish>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tonAmount: PromiseOrValue<BigNumberish>,
      swapType: PromiseOrValue<BigNumberish>,
      slippageNumerator: PromiseOrValue<BigNumberish>,
      slippageDenominator: PromiseOrValue<BigNumberish>,
      level3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expectedReturn(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "forceWithdraw((address,uint256))"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "forceWithdraw((address,uint256)[])"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _token: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      _targetDecimals: PromiseOrValue<BigNumberish>,
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastReport(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedProfitDegradation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    management(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateStrategy(
      oldVersion: PromiseOrValue<string>,
      newVersion: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingWithdrawals(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingWithdrawalsPerUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingWithdrawalsTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    report(
      gain: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      _debtPayment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "revokeStrategy()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "revokeStrategy(address)"(
      strategyId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "saveWithdraw(bytes,bytes[],uint256)"(
      payload: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "saveWithdraw(bytes,bytes[])"(
      payload: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfiguration(
      _configuration: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyShutdown(
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLockedProfitDegradation(
      degradation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManagement(
      _management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManagementFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPendingWithdrawalApprove((address,uint256)[],uint8[])"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct[],
      approveStatus: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPendingWithdrawalApprove((address,uint256),uint8)"(
      pendingWithdrawalId: IVault.PendingWithdrawalIdStruct,
      approveStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingWithdrawalBounty(
      id: PromiseOrValue<BigNumberish>,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewards(
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyRewards(
      strategyId: PromiseOrValue<string>,
      _rewards: IEverscale.EverscaleAddressStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUndeclaredWithdrawLimit(
      _undeclaredWithdrawLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      _withdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawGuardian(
      _withdrawGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawLimitPerPeriod(
      _withdrawLimitPerPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalQueue(
      queue: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    skim(
      strategyId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strategies(
      strategyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweep(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    targetDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    undeclaredWithdrawLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateStrategyDebtRatio(
      strategyId: PromiseOrValue<string>,
      _debtRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStrategyMaxDebtPerHarvest(
      strategyId: PromiseOrValue<string>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStrategyMinDebtPerHarvest(
      strategyId: PromiseOrValue<string>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStrategyPerformanceFee(
      strategyId: PromiseOrValue<string>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      amountRequested: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      maxLoss: PromiseOrValue<BigNumberish>,
      bounty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawLimitPerPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalIds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalPeriods(
      withdrawalPeriodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalQueue(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
